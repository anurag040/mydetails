<div class="chat-container" *ngIf="isOpen">
  <div class="chat-header">
    <h2>Chatbot</h2>
    <div class="chat-controls">
      <button (click)="toggleMinimize()">{{ isMinimized ? '⬆️' : '⬇️' }}</button>
      <button (click)="exportChat()">⬇️ Export</button>
      <button (click)="clearChat()">🗑️ Clear</button>
      <button (click)="closeChat()">✖️</button>
    </div>
  </div>
  <div class="chat-body" #chatBody *ngIf="!isMinimized">
    <div *ngFor="let message of messages" class="chat-message" [ngClass]="{'sent': message.sent, 'received': !message.sent}">
      {{ message.text }}
    </div>
  </div>
  <div class="chat-footer" *ngIf="!isMinimized">
    <input [(ngModel)]="newMessage" (keydown.enter)="sendMessage()" placeholder="Type a message...">
    <button (click)="sendMessage()">Send</button>
  </div>
</div>
<button class="reopen-chat" *ngIf="!isOpen" (click)="openChat()">💬</button>


.chat-container {
  display: flex;
  flex-direction: column;
  max-width: 400px;
  margin: auto;
  border: 1px solid #ccc;
  border-radius: 10px;
  overflow: hidden;
  position: fixed;
  bottom: 20px;
  right: 20px;
  background: #fff;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  max-height: 80vh; /* Restrict max height */
}

.chat-header {
  background: #3b5998;
  color: #fff;
  padding: 10px;
  text-align: center;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.chat-controls {
  display: flex;
  gap: 5px;
}

.chat-body {
  flex: 1;
  padding: 10px;
  overflow-y: auto; /* Enable vertical scroll */
}

.chat-message {
  margin: 5px 0;
  padding: 10px;
  border-radius: 10px;
  max-width: 70%;
}

.sent {
  background: #DCF8C6;
  align-self: flex-end;
}

.received {
  background: #fff;
  align-self: flex-start;
  border: 1px solid #ccc;
}

.chat-footer {
  display: flex;
  padding: 10px;
  border-top: 1px solid #ccc;
}

.chat-footer input {
  flex: 1;
  padding: 10px;
  border: 1px solid #ccc;
  border-radius: 10px;
  margin-right: 10px;
}

.chat-footer button {
  padding: 10px;
  background: #3b5998;
  color: #fff;
  border: none;
  border-radius: 10px;
}

.reopen-chat {
  position: fixed;
  bottom: 20px;
  right: 20px;
  background: #3b5998;
  color: #fff;
  border: none;
  padding: 10px;
  border-radius: 50%;
  font-size: 24px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  cursor: pointer;
}


import { Component, ElementRef, ViewChild, AfterViewChecked } from '@angular/core';
import { saveAs } from 'file-saver';

interface Message {
  text: string;
  sent: boolean;
}

@Component({
  selector: 'app-chat',
  templateUrl: './chat.component.html',
  styleUrls: ['./chat.component.css']
})
export class ChatComponent implements AfterViewChecked {
  @ViewChild('chatBody') private chatBody!: ElementRef;

  messages: Message[] = [];
  newMessage: string = '';
  isMinimized: boolean = false;
  isOpen: boolean = true;

  ngAfterViewChecked() {
    this.scrollToBottom();
  }

  sendMessage() {
    if (this.newMessage.trim()) {
      this.messages.push({ text: this.newMessage, sent: true });
      this.newMessage = '';
      // Simulate a response from the bot
      setTimeout(() => {
        this.messages.push({ text: 'This is a bot response', sent: false });
      }, 1000);
    }
  }

  exportChat() {
    const chatContent = this.messages.map(msg => (msg.sent ? 'You: ' : 'Bot: ') + msg.text).join('\n');
    const blob = new Blob([chatContent], { type: 'text/plain;charset=utf-8' });
    saveAs(blob, 'chat.txt');
  }

  clearChat() {
    this.messages = [];
  }

  toggleMinimize() {
    this.isMinimized = !this.isMinimized;
  }

  closeChat() {
    this.isOpen = false;
  }

  openChat() {
    this.isOpen = true;
    this.isMinimized = false;
  }

  private scrollToBottom() {
    try {
      this.chatBody.nativeElement.scrollTop = this.chatBody.nativeElement.scrollHeight;
    } catch (err) { }
  }
}
