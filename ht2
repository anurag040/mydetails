import { Component, OnInit } from '@angular/core';

interface Suggestion {
  id: number;
  code: string;
}

@Component({
  selector: 'app-copilot',
  templateUrl: './copilot.component.html',
  styleUrls: ['./copilot.component.css']
})
export class CopilotComponent implements OnInit {
  loading = false;
  suggestions: Suggestion[] = [
    { id: 1, code: 'Refactor this function to reduce complexity and improve readability.' },
    { id: 2, code: 'Consider using a more efficient sorting algorithm here.' },
    { id: 3, code: 'Replace repeated code with a helper function to follow DRY principles.' },
  ];
  currentSuggestion: string = '';
  currentIndex = 0;

  ngOnInit() {
    this.startTypingEffect();
  }

  // Start typing effect for each suggestion one at a time
  async startTypingEffect() {
    for (const suggestion of this.suggestions) {
      await this.typeSuggestion(suggestion.code);
      this.currentIndex++;
    }
  }

  // Types out a single suggestion at 10 characters per second
  typeSuggestion(text: string) {
    return new Promise<void>((resolve) => {
      let typedText = '';
      let index = 0;

      const interval = setInterval(() => {
        typedText += text[index];
        this.currentSuggestion = typedText;

        if (index >= text.length - 1) {
          clearInterval(interval);
          resolve();
        } else {
          index++;
        }
      }, 100); // Typing speed: 100ms per character for 10 chars per second
    });
  }

  // Methods to apply or dismiss a suggestion
  applySuggestion() {
    alert(`Applied suggestion: ${this.currentSuggestion}`);
    this.moveToNextSuggestion();
  }

  dismissSuggestion() {
    this.moveToNextSuggestion();
  }

  moveToNextSuggestion() {
    if (this.currentIndex < this.suggestions.length - 1) {
      this.currentIndex++;
      this.startTypingEffect();
    } else {
      this.currentSuggestion = '';
    }
  }
}


<div class="copilot-container">
  <button mat-raised-button color="primary" (click)="startTypingEffect()">
    <mat-icon>auto_fix_high</mat-icon> Fix Using My Copilot
  </button>
  
  <div *ngIf="currentSuggestion" class="suggestion-box">
    <h3>Suggested Fix</h3>
    <p class="suggestion-text">{{ currentSuggestion }}</p>
    <div class="suggestion-actions">
      <button mat-icon-button color="primary" (click)="applySuggestion()">
        <mat-icon>check_circle</mat-icon>
      </button>
      <button mat-icon-button color="warn" (click)="dismissSuggestion()">
        <mat-icon>cancel</mat-icon>
      </button>
    </div>
  </div>
  
  <mat-progress-spinner *ngIf="loading" mode="indeterminate"></mat-progress-spinner>
</div>



.copilot-container {
  padding: 20px;
  max-width: 600px;
  margin: 0 auto;
  text-align: left;
}

button {
  font-weight: bold;
  margin-bottom: 20px;
}

.suggestion-box {
  background-color: #ffffff;
  padding: 20px;
  border-radius: 8px;
  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
  margin-top: 15px;
  position: relative;
}

h3 {
  color: #4267B2;
  font-size: 20px;
  font-weight: 600;
  margin-bottom: 10px;
}

.suggestion-text {
  font-family: 'Courier New', monospace;
  font-size: 15px;
  color: #333;
}

.suggestion-actions {
  display: flex;
  justify-content: flex-end;
  margin-top: 15px;
}

.suggestion-actions button {
  font-size: 20px;
  margin-left: 5px;
  transition: color 0.3s ease;
}
