CREATE TABLE conversation_memory (
    user_id VARCHAR2(100),
    session_id VARCHAR2(100),
    memory_text CLOB,
    last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (user_id, session_id)
);

Create a Custom Memory Class
from langchain.memory import BaseMemory
from langchain.schema import messages_from_dict, messages_to_dict
import cx_Oracle
import json

class OracleConversationMemory(BaseMemory):
    def __init__(self, user_id, session_id, oracle_conn_str):
        self.user_id = user_id
        self.session_id = session_id
        self.oracle_conn_str = oracle_conn_str
        self.chat_history = []
        self._load_memory()

    @property
    def memory_variables(self):
        return ["chat_history"]

    def _connect(self):
        return cx_Oracle.connect(self.oracle_conn_str)

    def _load_memory(self):
        conn = self._connect()
        cursor = conn.cursor()
        cursor.execute("""
            SELECT memory_text FROM conversation_memory
            WHERE user_id = :1 AND session_id = :2
        """, (self.user_id, self.session_id))
        row = cursor.fetchone()
        if row:
            memory_dicts = json.loads(row[0])
            self.chat_history = messages_from_dict(memory_dicts)
        cursor.close()
        conn.close()

    def save_context(self, inputs, outputs):
        from langchain.schema import AIMessage, HumanMessage
        self.chat_history.append(HumanMessage(content=inputs['input']))
        self.chat_history.append(AIMessage(content=outputs['output']))

        conn = self._connect()
        cursor = conn.cursor()

        json_history = json.dumps(messages_to_dict(self.chat_history))
        cursor.execute("""
            MERGE INTO conversation_memory c
            USING dual
            ON (c.user_id = :1 AND c.session_id = :2)
            WHEN MATCHED THEN
                UPDATE SET memory_text = :3, last_updated = CURRENT_TIMESTAMP
            WHEN NOT MATCHED THEN
                INSERT (user_id, session_id, memory_text)
                VALUES (:1, :2, :3)
        """, (self.user_id, self.session_id, json_history))

        conn.commit()
        cursor.close()
        conn.close()

    def load_memory_variables(self, inputs):
        return {"chat_history": self.chat_history}

    def clear(self):
        self.chat_history = []



Step 5: Use with LangChain Agent or LLM Chain
python
Copy
Edit
from langchain.chat_models import ChatOpenAI
from langchain.chains import ConversationChain

oracle_conn_str = "your_user/your_password@your_host:your_port/your_service"
memory = OracleConversationMemory(user_id="user123", session_id="session1", oracle_conn_str=oracle_conn_str)

llm = ChatOpenAI(temperature=0)
conversation = ConversationChain(
    llm=llm,
    memory=memory,
    verbose=True
)

response = conversation.predict(input="What's the weather like in Pune?")
print(response)
