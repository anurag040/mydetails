Here's the complete example with the updated remote application names (anurag, akshay, sunil):

Project Structure
bash
Copy code
/module-federation-angular-demo
  /host-app
  /anurag
  /akshay
  /sunil
1. Remote Applications Setup
a. Remote Application: anurag
1. Create the anurag Application

bash
Copy code
ng new anurag --routing --style=scss
cd anurag
2. Install Webpack and Module Federation Plugin

bash
Copy code
npm install webpack@5 @angular-architects/module-federation
3. Configure Webpack

Create webpack.config.js:

javascript
Copy code
const ModuleFederationPlugin = require('webpack/lib/container/ModuleFederationPlugin');
const path = require('path');
const packageJson = require('./package.json');

module.exports = {
  mode: 'development',
  entry: './src/main.ts',
  output: {
    publicPath: 'http://localhost:4201/',
    filename: 'remoteEntry.js',
    uniqueName: 'anurag',
  },
  plugins: [
    new ModuleFederationPlugin({
      name: 'anurag',
      filename: 'remoteEntry.js',
      exposes: {
        './SomeComponent': './src/app/some-component/some-component.component.ts',
      },
      shared: {
        ...packageJson.dependencies,
        '@angular/core': { singleton: true, strictVersion: true },
        '@angular/common': { singleton: true, strictVersion: true },
        '@angular/router': { singleton: true, strictVersion: true },
      },
    }),
  ],
  devServer: {
    port: 4201,
    historyApiFallback: true,
  },
};
4. Create and Export Component

Generate a component:

bash
Copy code
ng generate component some-component
Update some-component.component.ts:

typescript
Copy code
import { Component } from '@angular/core';

@Component({
  selector: 'app-some-component',
  template: '<div>Anurag Component</div>',
})
export class SomeComponent {}
5. Serve the Application

bash
Copy code
ng serve --port 4201
b. Remote Application: akshay
1. Create the akshay Application

bash
Copy code
ng new akshay --routing --style=scss
cd akshay
2. Install Webpack and Module Federation Plugin

bash
Copy code
npm install webpack@5 @angular-architects/module-federation
3. Configure Webpack

Create webpack.config.js:

javascript
Copy code
const ModuleFederationPlugin = require('webpack/lib/container/ModuleFederationPlugin');
const path = require('path');
const packageJson = require('./package.json');

module.exports = {
  mode: 'development',
  entry: './src/main.ts',
  output: {
    publicPath: 'http://localhost:4202/',
    filename: 'remoteEntry.js',
    uniqueName: 'akshay',
  },
  plugins: [
    new ModuleFederationPlugin({
      name: 'akshay',
      filename: 'remoteEntry.js',
      exposes: {
        './AnotherComponent': './src/app/another-component/another-component.component.ts',
      },
      shared: {
        ...packageJson.dependencies,
        '@angular/core': { singleton: true, strictVersion: true },
        '@angular/common': { singleton: true, strictVersion: true },
        '@angular/router': { singleton: true, strictVersion: true },
      },
    }),
  ],
  devServer: {
    port: 4202,
    historyApiFallback: true,
  },
};
4. Create and Export Component

Generate a component:

bash
Copy code
ng generate component another-component
Update another-component.component.ts:

typescript
Copy code
import { Component } from '@angular/core';

@Component({
  selector: 'app-another-component',
  template: '<div>Akshay Component</div>',
})
export class AnotherComponent {}
5. Serve the Application

bash
Copy code
ng serve --port 4202
c. Remote Application: sunil
1. Create the sunil Application

bash
Copy code
ng new sunil --routing --style=scss
cd sunil
2. Install Webpack and Module Federation Plugin

bash
Copy code
npm install webpack@5 @angular-architects/module-federation
3. Configure Webpack

Create webpack.config.js:

javascript
Copy code
const ModuleFederationPlugin = require('webpack/lib/container/ModuleFederationPlugin');
const path = require('path');
const packageJson = require('./package.json');

module.exports = {
  mode: 'development',
  entry: './src/main.ts',
  output: {
    publicPath: 'http://localhost:4203/',
    filename: 'remoteEntry.js',
    uniqueName: 'sunil',
  },
  plugins: [
    new ModuleFederationPlugin({
      name: 'sunil',
      filename: 'remoteEntry.js',
      exposes: {
        './YetAnotherComponent': './src/app/yet-another-component/yet-another-component.component.ts',
      },
      shared: {
        ...packageJson.dependencies,
        '@angular/core': { singleton: true, strictVersion: true },
        '@angular/common': { singleton: true, strictVersion: true },
        '@angular/router': { singleton: true, strictVersion: true },
      },
    }),
  ],
  devServer: {
    port: 4203,
    historyApiFallback: true,
  },
};
4. Create and Export Component

Generate a component:

bash
Copy code
ng generate component yet-another-component
Update yet-another-component.component.ts:

typescript
Copy code
import { Component } from '@angular/core';

@Component({
  selector: 'app-yet-another-component',
  template: '<div>Sunil Component</div>',
})
export class YetAnotherComponent {}
5. Serve the Application

bash
Copy code
ng serve --port 4203
2. Host Application Setup
1. Create the Host Application

bash
Copy code
ng new host-app --routing --style=scss
cd host-app
2. Install Webpack and Module Federation Plugin

bash
Copy code
npm install webpack@5 @angular-architects/module-federation
3. Configure Webpack

Create webpack.config.js:

javascript
Copy code
const ModuleFederationPlugin = require('webpack/lib/container/ModuleFederationPlugin');
const path = require('path');
const packageJson = require('./package.json');

module.exports = {
  mode: 'development',
  entry: './src/main.ts',
  output: {
    publicPath: 'http://localhost:4200/',
    filename: 'main.js',
    uniqueName: 'hostApp',
  },
  plugins: [
    new ModuleFederationPlugin({
      remotes: {
        anurag: 'anurag@http://localhost:4201/remoteEntry.js',
        akshay: 'akshay@http://localhost:4202/remoteEntry.js',
        sunil: 'sunil@http://localhost:4203/remoteEntry.js',
      },
      shared: {
        ...packageJson.dependencies,
        '@angular/core': { singleton: true, strictVersion: true },
        '@angular/common': { singleton: true, strictVersion: true },
        '@angular/router': { singleton: true, strictVersion: true },
      },
    }),
  ],
  devServer: {
    port: 4200,
    historyApiFallback: true,
  },
};
4. Implement Dynamic Component Loading

Update app.component.ts:

typescript
Copy code
import { Component, OnInit, ViewChild, ViewContainerRef } from '@angular/core';

@Component({
  selector: 'app-root',
  template: `
    <h1>Host Application</h1>
    <button (click)="loadComponent('anurag')">Load Anurag Component</button>
    <button (click)="loadComponent('akshay')">Load Akshay Component</button>
    <button (click)="loadComponent('sunil')">Load Sunil Component</button>
    <ng-container #container></ng-container>
  `,
})
export class AppComponent implements OnInit {
  @ViewChild('container', { read: ViewContainerRef }) container: ViewContainerRef;

  async loadComponent(app: string) {
    this.container.clear();
    
    try {
      let component;
      switch (app) {
        case 'anurag':
          const { SomeComponent } = await import('anurag/SomeComponent');
          component = SomeComponent;
          break;
        case 'akshay':
          const { AnotherComponent } = await import('akshay/AnotherComponent');
          component = AnotherComponent;
          break;
        case 'sunil':
          const { YetAnotherComponent } = await import('sunil/YetAnotherComponent');
          component = YetAnotherComponent;
          break;
        default:
          throw new Error('Unknown app');
      }
      if (component) {
        this.container.createComponent(component);
      }
    } catch (error) {
      console.error('Error loading component', error);
    }
  }

  ngOnInit() {}
}
5. Serve the Host Application

bash
Copy code
ng serve --port 4200
Summary
Host Application: Dynamically loads and displays components from the anurag, akshay, and sunil remote applications based on button clicks.
Remote Applications: Each exposes its own component via Webpack Module Federation.




will it work in anurag is a standalone app ?
ChatGPT
Yes, it will work if the anurag application is a standalone Angular application. Webpack Module Federation allows remote applications to be served independently and still be consumed by other applications, including standalone Angular apps.

Here’s how it works with a standalone anurag application:

Standalone Application: The anurag application operates as a standalone Angular app, serving its own components and exposing them through Webpack Module Federation.

Remote Setup: In the Webpack configuration for anurag, you set up Module Federation to expose components. This means that even though anurag is a standalone app, it provides components that other applications (like the host) can dynamically load.

Host Application: The host application will be able to load components from anurag because anurag provides a remoteEntry.js file that describes which components are available and how to load them.

Key Points
Standalone Hosting: Ensure that anurag is correctly serving its remoteEntry.js and that it’s accessible at http://localhost:4201/remoteEntry.js (or whatever URL you configure).

CORS Configuration: If accessing components from a different domain or port, make sure CORS (Cross-Origin Resource Sharing) is properly configured to allow requests from the host application.

Network Accessibility: Verify that the URLs specified in the host application’s Webpack configuration for remote components are correct and accessible.

Example Configuration
1. In anurag's webpack.config.js:

javascript
Copy code
const ModuleFederationPlugin = require('webpack/lib/container/ModuleFederationPlugin');
const path = require('path');
const packageJson = require('./package.json');

module.exports = {
  mode: 'development',
  entry: './src/main.ts',
  output: {
    publicPath: 'http://localhost:4201/',
    filename: 'remoteEntry.js',
    uniqueName: 'anurag',
  },
  plugins: [
    new ModuleFederationPlugin({
      name: 'anurag',
      filename: 'remoteEntry.js',
      exposes: {
        './SomeComponent': './src/app/some-component/some-component.component.ts',
      },
      shared: {
        ...packageJson.dependencies,
        '@angular/core': { singleton: true, strictVersion: true },
        '@angular/common': { singleton: true, strictVersion: true },
        '@angular/router': { singleton: true, strictVersion: true },
      },
    }),
  ],
  devServer: {
    port: 4201,
    historyApiFallback: true,
  },
};
2. In the Host Application’s webpack.config.js:

javascript
Copy code
const ModuleFederationPlugin = require('webpack/lib/container/ModuleFederationPlugin');
const path = require('path');
const packageJson = require('./package.json');

module.exports = {
  mode: 'development',
  entry: './src/main.ts',
  output: {
    publicPath: 'http://localhost:4200/',
    filename: 'main.js',
    uniqueName: 'hostApp',
  },
  plugins: [
    new ModuleFederationPlugin({
      remotes: {
        anurag: 'anurag@http://localhost:4201/remoteEntry.js',
        akshay: 'akshay@http://localhost:4202/remoteEntry.js',
        sunil: 'sunil@http://localhost:4203/remoteEntry.js',
      },
      shared: {
        ...packageJson.dependencies,
        '@angular/core': { singleton: true, strictVersion: true },
        '@angular/common': { singleton: true, strictVersion: true },
        '@angular/router': { singleton: true, strictVersion: true },
      },
    }),
  ],
  devServer: {
    port: 4200,
    historyApiFallback: true,
  },
};
Running the Applications
Start Remote Applications: Run anurag, akshay, and sunil applications on their respective ports.
Start Host Application: Run the host application, which will load components from the remote applications as configured.
By ensuring the above configurations are correct, your host application should be able to dynamically load components from the standalone anurag application without any issues.

i don;t have  anurag's webpack.config.js
ChatGPT
If you don’t have a webpack.config.js for the anurag application, you can create it to enable Module Federation. Below is the complete configuration needed to set up Module Federation for the anurag Angular application. This will ensure that anurag can expose components to be used by the host application.

Setting Up Module Federation in anurag
Install Required Dependencies
Make sure you have Webpack and the Module Federation plugin installed:

bash
Copy code
npm install webpack@5 @angular-architects/module-federation --save-dev
Create webpack.config.js
Create a webpack.config.js file in the root directory of the anurag application:

javascript
Copy code
const ModuleFederationPlugin = require('webpack/lib/container/ModuleFederationPlugin');
const path = require('path');
const packageJson = require('./package.json');

module.exports = {
  mode: 'development',
  entry: './src/main.ts',
  output: {
    publicPath: 'http://localhost:4201/',
    filename: 'remoteEntry.js',
    uniqueName: 'anurag',
  },
  plugins: [
    new ModuleFederationPlugin({
      name: 'anurag',
      filename: 'remoteEntry.js',
      exposes: {
        './SomeComponent': './src/app/some-component/some-component.component.ts',
      },
      shared: {
        ...packageJson.dependencies,
        '@angular/core': { singleton: true, strictVersion: true },
        '@angular/common': { singleton: true, strictVersion: true },
        '@angular/router': { singleton: true, strictVersion: true },
      },
    }),
  ],
  devServer: {
    port: 4201,
    historyApiFallback: true,
  },
};
Modify Angular Configuration
You need to update the Angular configuration to ensure it works with Webpack Module Federation. Open angular.json and modify the architect.build.options section to include Webpack configurations:

json
Copy code
"architect": {
  "build": {
    "options": {
      "outputPath": "dist/anurag",
      "index": "src/index.html",
      "main": "src/main.ts",
      "polyfills": "src/polyfills.ts",
      "tsConfig": "tsconfig.app.json",
      "assets": [
        "src/favicon.ico",
        "src/assets"
      ],
      "styles": [
        "src/styles.scss"
      ],
      "scripts": [],
      "webpackConfig": "webpack.config.js" // Add this line
    }
  }
}
Add Exposed Component
Ensure that you have the component you want to expose. For example, if you are exposing SomeComponent, it should be defined as follows:

src/app/some-component/some-component.component.ts:

typescript
Copy code
import { Component } from '@angular/core';

@Component({
  selector: 'app-some-component',
  template: '<div>Anurag Component</div>',
})
export class SomeComponent {}
Serve the Application
Start the anurag application:

bash
Copy code
ng serve --port 4201
Summary
By creating the webpack.config.js file and updating angular.json, you set up anurag to expose components using Webpack Module Federation. This configuration will allow other applications, like the host app, to dynamically load and use the exposed components from anurag.
