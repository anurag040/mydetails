Objective:
Generate clear, professional, visually appealing, accessible, and production-ready documentation for the EUA MPT Web Project (Java 17 / Spring Boot + Angular 16), with a strong focus on purpose, business value, workflows, CI/CD, and API usage, while reducing emphasis on exhaustive code walkthroughs and testing details.

üìò Documentation Requirements (Single File)

1Ô∏è‚É£ Project Overview (Primary Focus)
Provide:

Purpose of the project in plain, business-focused language

Key problems the project solves

Business value and measurable benefits

Primary user groups and use cases

Overview of how the system integrates into the larger organization

2Ô∏è‚É£ System Architecture Diagrams
Generate Mermaid and PlantUML diagrams with clear legends:

Authentication and Session Flow

Component and Data Flow

CI/CD Pipeline Architecture

User Interaction Lifecycle

Use:

Mermaid diagrams with dark theme

C4 notation PlantUML diagrams where appropriate

3Ô∏è‚É£ CI/CD & Deployment
Describe in detail:

CI/CD pipelines (tools, workflows, triggers)

Deployment process step by step

Rollback and release management

Environment configuration for dev, test, and prod

4Ô∏è‚É£ API Usage Guide
Include:

List of REST endpoints with descriptions

Request and response examples in JSON

Authentication and authorization methods

Common error codes and troubleshooting

Best practices for API consumption

5Ô∏è‚É£ Setup & Installation
Provide clear instructions:

Prerequisites and environment setup

Backend authentication configuration

Frontend installation and build commands

Configuration guidance

Key troubleshooting tips

6Ô∏è‚É£ User Guide & UI Walkthrough
For each major screen, include:
‚úÖ Purpose and value of the screen
‚úÖ Table of options/actions
‚úÖ Step-by-step workflow
‚úÖ Usability and accessibility tips

Screen Order (strict):

Single Message Upload (New Message Screen) (HomePage.png)

ISO 20022 Hub (IsoStudio.png)

My Messages (ProcessesMessages.png)

Batch Upload (IsoStudio.png)

Include detailed workflows:

Message creation

Template store and reuse

XPart selection and validation

Template storage

7Ô∏è‚É£ Code Walkthrough (De-emphasized)
Include only high-level examples:

Representative annotated snippets for backend and frontend

Short descriptions of key components

Highlight important conventions or design patterns

8Ô∏è‚É£ Testing & Validation (De-emphasized)
Provide:

Brief list of tools/frameworks used

Example test commands

How testing supports reliability

9Ô∏è‚É£ Best Practices
Include recommendations:

Coding and design standards

Security measures

Performance optimization

Scalability strategies

üîü Screenshots & UI Reference
Create:

A styled HTML table listing all screens and preview images from the Sc/ folder

alt text and ARIA labels for accessibility

1Ô∏è‚É£1Ô∏è‚É£ Copilot vs. No-Copilot Comparison
Show:

Time taken per section

Quality and completeness comparison

1Ô∏è‚É£2Ô∏è‚É£ Prompt Iteration Notes
Document all major changes and improvements made during the documentation process

1Ô∏è‚É£3Ô∏è‚É£ Licensing & Contribution
Include:

Licensing information

Contribution guidelines

Disclaimers

‚ú® Visual, Formatting, and Accessibility Requirements

Generate one single Markdown file containing all sections above

Add a Table of Contents with anchor links

Use YAML front-matter metadata at the top:

yaml
Copy
Edit
---
title: EUA MPT Web Project Documentation
description: Complete project overview, architecture, setup, API usage, and guides
created: 
lastUpdated: 
author: 
version: 
---
Write in a professional, approachable tone, using second-person instructions and short, clear sentences

Validate all code snippets for correctness

Ensure diagrams are correct and consistent

Use semantic HTML in embedded tables (screenshots section)

Produce output that complies with WCAG 2.1 AA accessibility standards

üé® Bonus (Optional)

Include user personas and use cases illustrating business impact

Provide a 1-page Executive Summary summarizing purpose, benefits, and key workflows

‚úÖ Instruction to Copilot:
Generate and assemble one single Markdown document strictly following all sections, styles, diagrams, ordering, and formatting above.
Prioritize clarity, purpose, CI/CD workflows, and API usage over detailed code and test coverage.
Ensure consistency, correctness, and accessibility across the entire output.
